import java.util.*;
import java.io.*;
/**
   A vending machine.
*/
public class VendingMachine
{  
	private ArrayList<Product> products;
	private ArrayList<Integer> quantities = new ArrayList<Integer>();
	public CoinSet coins;
	public CoinSet currentCoins;

	public VendingMachine()
	{ 
		products = new ArrayList<Product>();
		coins = new CoinSet();
		currentCoins = new CoinSet();
	}
   
	public Product[] getProductTypes()
	{
		Product[] productTypes = new Product[products.size()];
		
		for(int i = 0; i < productTypes.length; i++)
			productTypes[i] = products.get(i);
		
		return productTypes;
	}
   
	public void addCoin(Coin c)
	{
		currentCoins.addCoin(c);
	}
	
	public String removeMoney()
	{	
		String result = "";
		if(currentCoins.amountOfCoins() > 0)
		{
			result =  currentCoins.amountOfCoins() + " " + coins.toString();
			currentCoins.clear();
		}
		else 
			result = "You have no money o be returned/ No change given";
		return result;
	}
	
	public void buyProduct(Product p) throws VendingException
	{
	   double totalCoins = currentCoins.amountOfCoins();
	   boolean done = false;
	   if(totalCoins >= p.getPrice())
	   {
			for(int j = 0; j < products.size() && !done; j++)
			{
				if(products.get(j).equals(p))
				{
					if(quantities.get(j) > 1)
						quantities.set(j, (quantities.get(j) - 1));
					else if(quantities.get(j) == 1)
					{
						products.remove(j);
						quantities.remove(j);
					}
					done = true;
				}
			}
		   
			for(int c = 0; c < currentCoins.getSize(); c++)
				coins.addCoin(currentCoins.get(c));
			
			currentCoins.clear();
	   }
	   else
		   throw new VendingException("Insufficient amount of money \nAmount you entered = " + currentCoins.amountOfCoins() 
									  +	", Price of product = " + p.getPrice());

	}
	
	public void addProduct(Product a, int q)
	{
		boolean found = false;
		for(int i = 0; i < products.size() && !found; i++)
		{
			if(products.get(i).toString().equals(a.toString()))
			{
				int nAmount = q + quantities.get(i);
				quantities.set(i, nAmount);
				found = true;
			}
		}
		
		if(!found)
		{
			products.add(a);
			quantities.add(q);
		}	
	}
}
